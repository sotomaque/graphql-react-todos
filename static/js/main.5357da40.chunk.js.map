{"version":3,"sources":["App.js","index.js"],"names":["ADD_TODO","gql","TOGGLE_TODOS","DELETE_TODO","GET_TODOS","App","React","useState","todoText","setTodoText","useQuery","data","loading","error","useMutation","toggleTodo","onCompleted","addTodo","deleteTodo","a","id","done","variables","console","log","event","preventDefault","trim","text","refetchQueries","query","window","confirm","update","cache","newTodos","readQuery","todos","filter","todo","writeQuery","steps","target","content","placement","disableBeacon","isLastStep","continuous","showProgress","className","role","aria-label","onSubmit","type","placeholder","onChange","value","map","onDoubleClick","handleToggleTodo","key","onClick","handleDeleteTodo","client","ApolloClient","uri","ReactDOM","render","document","getElementById"],"mappings":"qpCAMA,IAAMA,EAAWC,YAAH,KAYRC,EAAeD,YAAH,KAYZE,EAAcF,YAAH,KAYXG,EAAYH,YAAH,KAsHAI,MA5Gf,WAAgB,IAAD,EACmBC,IAAMC,SAAS,IADlC,mBACNC,EADM,KACIC,EADJ,OAEoBC,YAASN,GAAlCO,EAFK,EAELA,KAAMC,EAFD,EAECA,QAASC,EAFV,EAEUA,MAFV,EAGQC,YAAYZ,GAA1Ba,EAHM,sBAIKD,YAAYd,EAAU,CACtCgB,YAAa,kBAAMP,EAAY,OAD1BQ,EAJM,sBAOQH,YAAYX,GAA1Be,EAPM,gEASb,iCAAAC,EAAA,6DAAkCC,EAAlC,EAAkCA,GAAIC,EAAtC,EAAsCA,KAAtC,SACqBN,EAAW,CAC5BO,UAAW,CAAEF,KAAIC,MAAOA,KAF5B,OACQV,EADR,OAIEY,QAAQC,IAAI,eAAgBb,GAJ9B,4CATa,kEAgBb,WAA6Bc,GAA7B,eAAAN,EAAA,yDACEM,EAAMC,iBACDlB,EAASmB,OAFhB,iEAIqBV,EAAQ,CACzBK,UAAW,CAAEM,KAAMpB,GACnBqB,eAAgB,CACd,CAAEC,MAAO1B,MAPf,OAIQO,EAJR,OAUEY,QAAQC,IAAI,aAAcb,GAV5B,4CAhBa,kEA6Bb,+BAAAQ,EAAA,yDAAkCC,EAAlC,EAAkCA,IACZW,OAAOC,QAAQ,mCADrC,gCAGuBd,EAAW,CAC5BI,UAAW,CAAEF,MACba,OAAQ,SAAAC,GACN,IACMC,EADWD,EAAME,UAAU,CAAEN,MAAO1B,IAChBiC,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKnB,KAAOA,KAC3Dc,EAAMM,WAAW,CAAEV,MAAO1B,EAAWO,KAAM,CAAE0B,MAAOF,QAR5D,OAGUxB,EAHV,OAWIY,QAAQC,IAAI,eAAgBb,GAXhC,4CA7Ba,sBA4Cb,OAAIC,EAAgB,iDAChBC,EAAc,qDAyBhB,oCACE,kBAAC,IAAD,CAAS4B,MAxBC,CACZ,CACEC,OAAQ,iBACRC,QAAS,+BACTC,UAAW,SACXC,eAAe,GAEjB,CACEH,OAAQ,kBACRC,QAAS,qHAEX,CACED,OAAQ,iBACRC,QAAS,sEAEX,CACED,OAAQ,kBACRC,QAAS,qDACTG,YAAY,IAMWC,YAAY,EAAMC,cAAc,IACvD,yBAAKC,UAAU,oFACT,wBAAIA,UAAU,QAAd,oBACE,0BAAMC,KAAK,MAAMC,aAAW,aAA5B,WAGF,0BAAMC,SA7EH,4CA6E4BH,UAAU,OACvC,2BACEA,UAAU,kCACVI,KAAK,OACLC,YAAY,aACZC,SAAU,SAAA9B,GAAK,OAAIhB,EAAYgB,EAAMiB,OAAOc,QAC5CA,MAAOhD,IAET,4BACEyC,UAAU,kBACVI,KAAK,UAFP,WAKF,yBAAKJ,UAAU,gDACZtC,EAAK0B,MAAMoB,KAAI,SAAAlB,GAAI,OAClB,uBAAGmB,cAAe,kBA5FnB,2CA4FyBC,CAAiBpB,IAAOqB,IAAKrB,EAAKnB,IACxD,0BAAM6B,UAAS,8BAAyBV,EAAKlB,MAAQ,SAAtC,mBACZkB,EAAKX,MAER,4BAAQiC,QAAS,kBAhGpB,2CAgG0BC,CAAiBvB,IAAOU,UAAU,wBACvD,0BAAMA,UAAU,sBAAhB,iB,OC/Idc,EAAS,IAAIC,IAAa,CAC5BC,IAAK,yDAITC,IAASC,OACL,kBAAC,IAAD,CAAgBJ,OAAQA,GACpB,kBAAC,EAAD,OAEJK,SAASC,eAAe,W","file":"static/js/main.5357da40.chunk.js","sourcesContent":["import React from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport Joyride from 'react-joyride';\n\n// add todos\nconst ADD_TODO = gql`\n  mutation addTodo($text: String!) {\n    insert_todos(objects: {text: $text}) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`\n// toggle todos\nconst TOGGLE_TODOS = gql`\n  mutation toggleTodo($id: uuid!, $done: Boolean!) {\n    update_todos(where: {id: {_eq: $id}}, _set: {done: $done}) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`\n// delete todos\nconst DELETE_TODO = gql`\n  mutation DeleteTodo($id:uuid!) {\n    delete_todos(where: {id: {_eq: $id}}) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`\n// list todos\nconst GET_TODOS = gql`\n  query getTodos {\n      todos {\n          done\n          id\n          text\n      }\n  } \n`\n\nfunction App() {\n  const [todoText, setTodoText] = React.useState('');\n  const { data, loading, error } = useQuery(GET_TODOS);\n  const [toggleTodo] = useMutation(TOGGLE_TODOS);\n  const [addTodo] = useMutation(ADD_TODO, {\n    onCompleted: () => setTodoText('')\n  });\n  const [deleteTodo] = useMutation(DELETE_TODO);\n\n  async function handleToggleTodo({ id, done }) {\n    const data = await toggleTodo({ \n      variables: { id, done: !done }\n    });\n    console.log('toggled todo', data);\n  }\n\n  async function handleAddTodo(event) {\n    event.preventDefault();\n    if (!todoText.trim()) return;\n\n    const data = await addTodo({ \n      variables: { text: todoText },\n      refetchQueries: [\n        { query: GET_TODOS }\n      ]\n    });\n    console.log('added todo', data);\n  }\n\n  async function handleDeleteTodo({ id }) {\n    const isConfirmed = window.confirm('Do you want to delete this todo')\n    if (isConfirmed) {\n      const data = await deleteTodo({ \n        variables: { id },\n        update: cache => {\n          const prevData = cache.readQuery({ query: GET_TODOS });\n          const newTodos = prevData.todos.filter(todo => todo.id !== id);\n          cache.writeQuery({ query: GET_TODOS, data: { todos: newTodos }});\n        }\n      });\n      console.log('deleted todo', data);\n    }\n  }\n\n  if (loading) return <div>loading todos...</div>\n  if (error) return <div>error fetching todos</div>\n\n  const steps = [\n    {\n      target: \".my-first-step\",\n      content: \"Welcome to GraphQL Checklist\",\n      placement: 'center',\n      disableBeacon: true\n    },\n    {\n      target: \".my-second-step\",\n      content: \"To add a new item to your todo list, simply type it in here, and either click on the create button or press enter\"\n    },\n    {\n      target: \".my-third-step\",\n      content: \"To mark an item as \\'done\\' simply double click the item in the list\"\n    },\n    {\n      target: \".my-fourth-step\",\n      content: \"To erase an item from your list, click the red 'X'\",\n      isLastStep: true\n    }\n  ]\n\n  return (\n    <>\n      <Joyride steps={steps} continuous={true} showProgress={false} />\n      <div className=\"vh-100 code flex flex-column items-center bg-purple white pa3 fl-1 my-first-step\">  \n            <h1 className=\"f2-l\">GraphQL Checklist \n              <span role=\"img\" aria-label=\"Checkmark\">âœ…</span>\n            </h1>\n            {/* Todo Form  */}\n            <form onSubmit={handleAddTodo} className=\"mb3\">\n              <input\n                className=\"pa2 f4 b--dashed my-second-step\"\n                type=\"text\"\n                placeholder=\"Add A Todo\"\n                onChange={event => setTodoText(event.target.value)}\n                value={todoText}\n              />\n              <button \n                className=\"pa2 f4 bg-green\"\n                type=\"submit\">Create</button>\n            </form>\n            {/* Todos list  */}\n            <div className=\"flex items-center justify-center flex-column\">\n              {data.todos.map(todo => (\n                <p onDoubleClick={() => handleToggleTodo(todo)} key={todo.id}>\n                  <span className={`pointer list pa1 f3 ${todo.done && \"strike\"} my-third-step`}>\n                    {todo.text}\n                  </span>\n                  <button onClick={() => handleDeleteTodo(todo)} className=\"bg-transparent bn f4\">\n                    <span className=\"red my-fourth-step\">&times;</span>\n                  </button>\n                </p>\n              ))}\n            </div>\n          </div>\n    </>\n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks'\n\nconst client = new ApolloClient({\n    uri: 'https://react-todos-graphql.herokuapp.com/v1/graphql'\n});\n\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>, \n    document.getElementById('root')\n);"],"sourceRoot":""}