{"version":3,"sources":["App.js","index.js"],"names":["ADD_TODO","gql","TOGGLE_TODOS","DELETE_TODO","GET_TODOS","App","React","useState","todoText","setTodoText","useQuery","data","loading","error","useMutation","toggleTodo","onCompleted","addTodo","deleteTodo","a","id","done","variables","event","preventDefault","trim","text","refetchQueries","query","window","confirm","update","cache","newTodos","readQuery","todos","filter","todo","writeQuery","className","role","aria-label","onSubmit","type","placeholder","onChange","target","value","style","overflow","width","map","onDoubleClick","handleToggleTodo","key","onClick","handleDeleteTodo","client","ApolloClient","uri","ReactDOM","render","document","getElementById"],"mappings":"kqCAKA,IAAMA,EAAWC,YAAH,KAYRC,EAAeD,YAAH,KAYZE,EAAcF,YAAH,KAYXG,EAAYH,YAAH,KAkGAI,MAxFf,WAAgB,IAAD,EACmBC,IAAMC,SAAS,IADlC,mBACNC,EADM,KACIC,EADJ,OAEoBC,YAASN,GAAlCO,EAFK,EAELA,KAAMC,EAFD,EAECA,QAASC,EAFV,EAEUA,MAFV,EAGQC,YAAYZ,GAA1Ba,EAHM,sBAIKD,YAAYd,EAAU,CACtCgB,YAAa,kBAAMP,EAAY,OAD1BQ,EAJM,sBAOQH,YAAYX,GAA1Be,EAPM,gEASb,+BAAAC,EAAA,6DAAkCC,EAAlC,EAAkCA,GAAIC,EAAtC,EAAsCA,KAAtC,SACqBN,EAAW,CAC5BO,UAAW,CAAEF,KAAIC,MAAOA,KAF5B,0DATa,kEAgBb,WAA6BE,GAA7B,SAAAJ,EAAA,yDACEI,EAAMC,iBACDhB,EAASiB,OAFhB,iEAIqBR,EAAQ,CACzBK,UAAW,CAAEI,KAAMlB,GACnBmB,eAAgB,CACd,CAAEC,MAAOxB,MAPf,0DAhBa,kEA6Bb,6BAAAe,EAAA,yDAAkCC,EAAlC,EAAkCA,IACZS,OAAOC,QAAQ,mCADrC,gCAGuBZ,EAAW,CAC5BI,UAAW,CAAEF,MACbW,OAAQ,SAAAC,GACN,IACMC,EADWD,EAAME,UAAU,CAAEN,MAAOxB,IAChB+B,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKjB,KAAOA,KAC3DY,EAAMM,WAAW,CAAEV,MAAOxB,EAAWO,KAAM,CAAEwB,MAAOF,QAR5D,0DA7Ba,sBA4Cb,OAAIrB,EAAgB,iDAChBC,EAAc,qDAIhB,oCAEE,yBAAK0B,UAAU,sEACT,wBAAIA,UAAU,QAAd,oBACE,0BAAMC,KAAK,MAAMC,aAAW,aAA5B,WAGF,0BAAMC,SAxDH,4CAwD4BH,UAAU,OACvC,2BACEA,UAAU,mBACVI,KAAK,OACLC,YAAY,aACZC,SAAU,SAAAtB,GAAK,OAAId,EAAYc,EAAMuB,OAAOC,QAC5CA,MAAOvC,IAET,4BACE+B,UAAU,kBACVI,KAAK,UAFP,WAKF,yBAAKJ,UAAU,+CAA+CS,MAAO,CAACC,SAAU,SAAUC,MAAO,SAC9FvC,EAAKwB,MAAMgB,KAAI,SAAAd,GAAI,OAClB,uBAAGe,cAAe,kBAvEnB,2CAuEyBC,CAAiBhB,IAAOiB,IAAKjB,EAAKjB,IACxD,0BAAMmB,UAAS,8BAAyBF,EAAKhB,MAAQ,WAClDgB,EAAKX,MAER,4BAAQ6B,QAAS,kBA3EpB,2CA2E0BC,CAAiBnB,IAAOE,UAAU,wBACvD,0BAAMA,UAAU,OAAhB,iB,OCvHdkB,G,MAAS,IAAIC,IAAa,CAC5BC,IAAK,0DAITC,IAASC,OACL,kBAAC,IAAD,CAAgBJ,OAAQA,GACpB,kBAAC,EAAD,OAEJK,SAASC,eAAe,W","file":"static/js/main.9329a21f.chunk.js","sourcesContent":["import React from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\n// add todos\nconst ADD_TODO = gql`\n  mutation addTodo($text: String!) {\n    insert_todos(objects: {text: $text}) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`\n// toggle todos\nconst TOGGLE_TODOS = gql`\n  mutation toggleTodo($id: uuid!, $done: Boolean!) {\n    update_todos(where: {id: {_eq: $id}}, _set: {done: $done}) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`\n// delete todos\nconst DELETE_TODO = gql`\n  mutation DeleteTodo($id:uuid!) {\n    delete_todos(where: {id: {_eq: $id}}) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`\n// list todos\nconst GET_TODOS = gql`\n  query getTodos {\n      todos {\n          done\n          id\n          text\n      }\n  } \n`\n\nfunction App() {\n  const [todoText, setTodoText] = React.useState('');\n  const { data, loading, error } = useQuery(GET_TODOS);\n  const [toggleTodo] = useMutation(TOGGLE_TODOS);\n  const [addTodo] = useMutation(ADD_TODO, {\n    onCompleted: () => setTodoText('')\n  });\n  const [deleteTodo] = useMutation(DELETE_TODO);\n\n  async function handleToggleTodo({ id, done }) {\n    const data = await toggleTodo({ \n      variables: { id, done: !done }\n    });\n    // console.log('toggled todo', data);\n  }\n\n  async function handleAddTodo(event) {\n    event.preventDefault();\n    if (!todoText.trim()) return;\n\n    const data = await addTodo({ \n      variables: { text: todoText },\n      refetchQueries: [\n        { query: GET_TODOS }\n      ]\n    });\n    // console.log('added todo', data);\n  }\n\n  async function handleDeleteTodo({ id }) {\n    const isConfirmed = window.confirm('Do you want to delete this todo')\n    if (isConfirmed) {\n      const data = await deleteTodo({ \n        variables: { id },\n        update: cache => {\n          const prevData = cache.readQuery({ query: GET_TODOS });\n          const newTodos = prevData.todos.filter(todo => todo.id !== id);\n          cache.writeQuery({ query: GET_TODOS, data: { todos: newTodos }});\n        }\n      });\n      // console.log('deleted todo', data);\n    }\n  }\n\n  if (loading) return <div>loading todos...</div>\n  if (error) return <div>error fetching todos</div>\n\n\n  return (\n    <>\n     \n      <div className=\"vh-100 code flex flex-column items-center bg-purple white pa3 fl-1\">  \n            <h1 className=\"f2-l\">GraphQL Checklist \n              <span role=\"img\" aria-label=\"Checkmark\">âœ…</span>\n            </h1>\n            {/* Todo Form  */}\n            <form onSubmit={handleAddTodo} className=\"mb3\">\n              <input\n                className=\"pa2 f4 b--dashed\"\n                type=\"text\"\n                placeholder=\"Add A Todo\"\n                onChange={event => setTodoText(event.target.value)}\n                value={todoText}\n              />\n              <button \n                className=\"pa2 f4 bg-green\"\n                type=\"submit\">Create</button>\n            </form>\n            {/* Todos list  */}\n            <div className=\"flex items-center justify-center flex-column\" style={{overflow: 'scroll', width: '80vw'}}>\n              {data.todos.map(todo => (\n                <p onDoubleClick={() => handleToggleTodo(todo)} key={todo.id}>\n                  <span className={`pointer list pa1 f3 ${todo.done && \"strike\"}`}>\n                    {todo.text}\n                  </span>\n                  <button onClick={() => handleDeleteTodo(todo)} className=\"bg-transparent bn f4\">\n                    <span className=\"red\">&times;</span>\n                  </button>\n                </p>\n              ))}\n              \n            </div>\n          </div>\n    </>\n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport './index.css';\n\nconst client = new ApolloClient({\n    uri: 'https://react-todos-graphql.herokuapp.com/v1/graphql'\n});\n\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>, \n    document.getElementById('root')\n);"],"sourceRoot":""}